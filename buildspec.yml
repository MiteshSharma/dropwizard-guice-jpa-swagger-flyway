version: 0.2

#env:
  #variables:
     # key: "value"
     # key: "value"
  #parameter-store:
     # key: "value"
     # key: "value"
  #secrets-manager:
     # key: secret-id:json-key:version-stage:version-id
     # key: secret-id:json-key:version-stage:version-id
  #exported-variables:
     # - variable
     # - variable
  #git-credential-helper: yes

phases:
  install:
    #If you use the Ubuntu standard image 2.0 or later, you must specify runtime-versions.
    #If you specify runtime-versions and use an image other than Ubuntu standard image 2.0, the build fails.
    runtime-versions:
      java: corretto8
    #runtime-versions:
      # name: version
      # name: version
    commands:
      - docker run --name mysql -p 3306:3306 -e MYSQL_USER=root -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=mobile_servers --health-cmd='mysqladmin ping --silent' -d mysql
      - docker run --name redis -p 6379:6379 --health-cmd='redis-cli ping' -d redis
      - ./scripts/dockerStatusCheck.sh mysql
      - ./scripts/dockerStatusCheck.sh redis
  pre_build:
    commands:
      - echo started integration testing on `date`
      - mvn clean verify -DskipIntegrationTests=false
      - echo completed integration testing on `date`
      - echo Logging in to Amazon ECR...
      - aws --version
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=${COMMIT_HASH:=latest}
  build:
    commands:
      - echo Build started on `date`
      - mvn clean install -DskipTests
      - echo Build completed on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
  post_build:
    commands:
      - echo Build completed on `date`
      - echo Pushing the Docker images...
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - echo Writing image definitions file for deployment
      - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
      - echo Docker images pushed to ECR ...
      - echo Post cleanup started on `date`
      - docker stop mysql
      - docker stop redis
      - echo Post cleanup completed on `date`
      - echo Preparing for deploy phase
      - echo $TASK_DEFINATION > taskdef.json
      - echo All files changed for deploy phase
artifacts:
  files:
    - imageDetail.json
    - appspec.yaml
    - taskdef.json